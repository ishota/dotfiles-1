snippet module
alias m
	module.exports = ${0};

snippet exports
alias e
	exports.${1} = $1;

snippet prototype
alias p
options word
	prototype.${1} = function(${0}) {
		//TODO
	};

snippet function
alias f
options word
	function() {
	}${0}

snippet var
alias v
	var ${1} = ${0};

snippet function_execute_immediately
alias (f
	(function() {
		${0}
	})();

snippet if
	if (${1}) {
    ${0}
	}

snippet ifelse
	if (${1}) {

	} else {

	}

snippet iferr
	if (err) {
		return callback(err);
	}

snippet for
	for (var i = 0; i < ${1}; i++) {
    ${0}
	}

snippet forin
	for (var key in ${1}) {
    ${0}
	}

snippet forEach
options word
	forEach(function(${1:item}) {
		${0}
	});

snippet map
options word
	map(function(${1:item}) {
		return ${0};
	});

snippet some
options word
	some(function(${1:item}) {
		return ${0};
	});

snippet every
options word
	every(function(${1:item}) {
		return ${0};
	});

snippet reduce
options word
	reduce(function(${2:acc}, ${1:cur}) {
		${0}
		return $1;
	}${3:#: ,[]});

snippet d
	debugger;

snippet setTimeout
	setTimeout(function() {
		${0}
	}, 1000);

snippet setInterval
	setInterval(function() {
		${0}
	}, 1000);

snippet sett6
	setTimeout(() => {
		${0}
	}, 1000);

snippet seti6
	setInterval(() => {
		${0}
	}, 1000);

snippet try
alias t
	try {
		${0}
	} catch (e) {
	}

snippet finally
	try {
		${0}
	} catch (e) {
		${1}
	} finally {
		${2}
	}

snippet argv
	process.argv

snippet log
	console.log(${0});

snippet error
	console.error(${0});

snippet trace
	console.trace(${0});

snippet dir
	console.dir(${0});

snippet time
	console.time(${0});

snippet timeEnd
	console.timeEnd(${0});

snippet require5
alias r5
abbr require in ES5
	var ${1} = require('$1${0}');


snippet now
options word
	Date.now()

snippet comment
alias /*
	/**
	 * ${0}
	 */

snippet series
options word
	async.series([
		function(next) {
		},
		function(next) {
		},
	], function(err) {
		if(err) {
		}
	});

snippet waterfall
options word
	async.waterfall([
		function(next) {
		},
		function(next) {
		},
	], function(err) {
		if(err) {
		}
	});

# mocha ES5
# snippet describe
# alias desc
# 	describe('${1}', function() {
#     ${2}
# 	});

# snippet it
# 	it('${1}', function() {
# 		${0}
# 	});

# snippet before
# 	before(function() {
# 		${0}
# 	});

# snippet beforeEach
# 	beforeEach(function() {
# 		${0}
# 	});

# snippet after
# 	after(function() {
# 		${0}
# 	});

# snippet afterEach
# 	afterEach(function() {
# 		${0}
# 	});

# mocha ES6
snippet describe
alias desc
	describe('${1}', () => {
    ${2}
	});

snippet it
	it('${1}', () => {
		${2}
	});

snippet before
	before(() => {
		${0}
	});

snippet beforeEach
	beforeEach(() => {
		${0}
	});

snippet after
	after(() => {
		${0}
	});

snippet afterEach
	afterEach(() => {
		${0}
	});

snippet strict
	'use strict';

snippet lodash
options head
alias _
  const _ = require('lodash');

# ES6
snippet =>
options word
  (${1}) => {
    ${0}
  }

snippet const
alias c
options head
	const ${0}

snippet require
alias r
	const ${1} = require('$1${0}');

snippet class
	class ${1:name} {
		constructor (${2:arg}) {
			${3:// init}
		}
		${4}
	}

snippet forof
	for (let ${1:s} of ${2:sequence}) {
		${3}
	}

snippet im
	import ${1:foo} from "${2:bar}"

snippet {
options word 
  {${0}}

snippet {}
options word 
  {
    ${1}: ${0},
  }

snippet :
options word 
  : ${0},

snippet [
options word 
  [${0}]

snippet []
options word 
  [
    ${0},
  ]

snippet $
options word 
  ${${0}}

snippet '
options word
  '${0}'

snippet `
options word
  \`${0}\`

snippet *
alias generator_function
options word
  function *(${1}) {
    ${0}
  }

snippet promise
alias bluebird
  const Promise = require('bluebird');

snippet return_promise
alias new_promise
options head
  return new Promise((resolve, reject) => {
    ${0}
  });

snippet coroutine
  Promise.coroutine(function *() {
    ${0}
